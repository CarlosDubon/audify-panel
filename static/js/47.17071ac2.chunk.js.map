{"version":3,"sources":["views/pages/login/Login.js"],"names":["Login","props","dispatch","useDispatch","token","useSelector","state","user","setUser","useState","password","setPassword","useEffect","history","replace","className","md","name","onChange","event","target","value","placeholder","autoComplete","type","xs","onClick","toast","promise","async","res","axios","post","process","username","status","data","push","e","response","makeRequest","error","success","loading","color","style","width"],"mappings":"6KAAA,+EA+HeA,UA3GAC,IACb,MAAMC,EAAWC,cACXC,EAAQC,aAAaC,GAAUA,EAAMC,KAAKH,SAEzCG,EAAKC,GAAWC,mBAAS,KACzBC,EAASC,GAAeF,mBAAS,IAExCG,qBAAU,KACLR,GACDH,EAAMY,QAAQC,QAAQ,gBAExB,IAmCF,OACE,qBAAKC,UAAU,yDAAf,SACE,cAAC,IAAD,UACE,cAAC,KAAD,CAAMA,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOD,UAAU,MAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,6CACA,mBAAGA,UAAU,uBAAb,4CACA,eAAC,KAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAOE,KAAK,eAEd,cAAC,IAAD,CACEC,SAAUC,GAASX,EAAQW,EAAMC,OAAOC,OACxCC,YAAY,UACZC,aAAa,gBAEjB,eAAC,KAAD,CAAaR,UAAU,OAAvB,UACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAOE,KAAK,sBAEd,cAAC,IAAD,CACEC,SAAUC,GAASR,EAAYQ,EAAMC,OAAOC,OAC5CG,KAAK,WACLF,YAAY,gBACZC,aAAa,wBAGjB,eAAC,KAAD,WACE,cAAC,IAAD,CAAME,GAAG,IAAT,SACE,cAAC,IAAD,CAASC,QAxCd,KACfC,IAAMC,QA3BUC,WAChB,IACE,GAAU,KAAPtB,GAAyB,KAAZG,EAad,KAAM,oDAbuB,CAC7B,IAAIoB,QAAYC,IAAMC,KAAN,UAAcC,4BAAd,gBAA0D,CACxEC,SAAS3B,EACTG,aAGgB,MAAfoB,EAAIK,SACLjC,EAAS,CAAEsB,KAAM,cAAepB,MAAO0B,EAAIM,KAAKhC,QAChDH,EAAMY,QAAQwB,KAAK,gBAOxB,MAAOC,GACN,GAAGA,EAAEC,WACsB,MAAtBD,EAAEC,SAASJ,QAAwC,MAAtBG,EAAEC,SAASJ,QACzC,KAAM,yBAGV,MAAMG,IAIME,GAAc,CAC1BC,MAAOH,GAAIA,EACXI,QAAQ,cACRC,QAAQ,0BAoCwCC,MAAM,UAAU7B,UAAU,OAAxD,8BAIF,cAAC,IAAD,CAAMU,GAAG,IAAIV,UAAU,aAAvB,SACE,cAAC,IAAD,CAAS6B,MAAM,OAAO7B,UAAU,OAAhC,0CAQV,cAAC,IAAD,CAAOA,UAAU,6BAA6B8B,MAAO,CAAEC,MAAO,OAA9D,SACE,cAAC,IAAD,CAAW/B,UAAU,cAArB,SACE","file":"static/js/47.17071ac2.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormControl,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport axios from \"axios\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {toast} from \"react-hot-toast\";\n\nconst Login = (props) => {\n  const dispatch = useDispatch()\n  const token = useSelector((state) => state.user.token)\n\n  const [user,setUser] = useState(\"\")\n  const [password,setPassword] = useState(\"\")\n\n  useEffect(()=>{\n    if(token){\n      props.history.replace(\"/dashboard\")\n    }\n  },[])\n\n  const makeRequest=async()=>{\n    try {\n      if(user!==\"\" && password !==\"\"){\n        let res = await axios.post(`${process.env.REACT_APP_API_URI}/auth/signin`,{\n          username:user,\n          password\n        })\n\n        if(res.status === 200){\n          dispatch({ type: 'update_user', token: res.data.token })\n          props.history.push(\"/dashboard\")\n        }\n\n\n      }else{\n        throw \"Campos vacíos, por favor verificar los campos.\"\n      }\n    }catch (e){\n      if(e.response){\n        if(e.response.status === 404 || e.response.status === 401){\n          throw \"Credenciales invalidas\"\n        }\n      }\n      throw e\n    }\n  }\n  const triggerReq=()=>{\n    toast.promise(makeRequest(),{\n      error:(e)=>e,\n      success:\"Bienvenido!\",\n      loading:\"Verificando datos...\"\n    })\n  }\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"8\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Sraag Admin</h1>\n                    <p className=\"text-medium-emphasis\">Inicia sesión con tu cuenta</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                      <CFormControl\n                        onChange={event => setUser(event.target.value)}\n                        placeholder=\"Usuario\"\n                        autoComplete=\"username\" />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                      <CFormControl\n                        onChange={event => setPassword(event.target.value)}\n                        type=\"password\"\n                        placeholder=\"Contraseña\"\n                        autoComplete=\"current-password\"\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs=\"6\">\n                        <CButton onClick={triggerReq} color=\"primary\" className=\"px-4\">\n                          Iniciar sesion\n                        </CButton>\n                      </CCol>\n                      <CCol xs=\"6\" className=\"text-right\">\n                        <CButton color=\"link\" className=\"px-0\">\n                          Forgot password?\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              <CCard className=\"text-white bg-primary py-5\" style={{ width: '44%' }}>\n                <CCardBody className=\"text-center\">\n                  <div>\n\n                  </div>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n"],"sourceRoot":""}