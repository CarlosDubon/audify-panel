{"version":3,"sources":["views/components/widgets/CMap.js","views/components/widgets/DropZone.js","views/theme/typography/Typography.js"],"names":["GoogleApiWrapper","apiKey","props","position","setPosition","useState","marker","setMarker","useEffect","navigator","geolocation","getCurrentPosition","lat","coords","latitude","long","longitude","style","height","google","zoom","initialCenter","lng","onClick","t","map","coord","latLng","title","name","onSelect","DropZone","file","setFile","getRootProps","getInputProps","isDragActive","useDropzone","accept","onDrop","acceptedFiles","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","Typography","place","_id","radius","token","useSelector","state","user","form","setForm","className","edit","htmlFor","value","onChange","event","target","type","id","placeholder","readOnly","parseFloat","min","toast","promise","async","fd","FormData","append","axios","put","process","headers","status","onClose","e","message","onEdit","console","log","post","history","replace","onSubmit","loading","success","error"],"mappings":"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","file":"static/js/51.82284753.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Map, GoogleApiWrapper, Marker} from 'google-maps-react';\n\nconst CMap = (props) => {\n  const [position, setPosition] = useState()\n  const [marker, setMarker] = useState()\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setPosition({\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        })\n      })\n    } else {\n      setPosition({})\n    }\n  }, [])\n\n  const handleClick = (t, map, coord) => {\n    const {latLng} = coord;\n    const lat = latLng.lat();\n    const lng = latLng.lng();\n\n    setMarker({\n      title: \"\",\n      name: \"\",\n      position: {\n        lat, lng\n      }\n    })\n    props.onSelect(lat, lng)\n  }\n\n  if (!position) {\n    return (\n      <></>\n    )\n  }\n  return (\n    <div style={{\n      position: \"relative\",\n      height: 300\n    }}>\n      <Map\n        google={props.google}\n        zoom={20}\n        initialCenter={{lat: position.lat, lng: position.long}}\n        onClick={handleClick}\n      >\n        {marker && (\n          <Marker\n            position={marker.position}\n          />\n        )}\n      </Map>\n    </div>\n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDAKFbkF15bYuJsKQMjb6M6FBGSVMH9ims'\n})(CMap);\n","import React, {useCallback, useState} from 'react';\nimport {useDropzone} from 'react-dropzone'\n\nconst DropZone = (props) => {\n  const [file,setFile]=useState(\"\")\n\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({\n    accept: \"audio/mpeg\",\n    onDrop: (acceptedFiles) => {\n        props.setFile(acceptedFiles[0])\n        setFile(acceptedFiles[0].name)\n    }\n    })\n\n\n  return (\n    <div>\n      <div {...getRootProps({\n        style: {\n          flex: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          padding: \"20px\",\n          borderWidth: \"2px\",\n          borderRadius: \"2px\",\n          borderColor: \"#eeeeee\",\n          borderStyle: \"dashed\",\n          backgroundColor: \"#fafafa\",\n          color: \"#bdbdbd\",\n          outline: \"none\",\n          transition: \"border .24s ease-in-out\",\n        },\n      })}\n\n      >\n        <input {...getInputProps()} />\n        {\n          !file ?\n            <p>Drop the files here ...</p> :\n            <p>{file}</p>\n\n        }\n      </div>\n    </div>\n  )\n};\n\nexport default DropZone;\n","import React, {useState} from 'react'\nimport {CButton, CCard, CCardBody, CCardHeader, CContainer, CForm, CFormControl, CFormLabel} from '@coreui/react'\nimport CMap from \"../../components/widgets/CMap\";\nimport DropZone from \"../../components/widgets/DropZone\";\nimport {toast} from \"react-hot-toast\";\nimport axios from \"axios\";\nimport {useSelector} from \"react-redux\";\n\nconst Typography = ({place = {_id: \"\", name: \"\", latitude: \"\", longitude: \"\", radius: 0}, ...props}) => {\n  const token = useSelector((state) => state.user.token)\n\n  const [form,setForm] = useState({\n    name: place.name,\n    lat: place.latitude,\n    lng: place.longitude,\n    radius: place.radius\n  })\n  const [file,setFile] =useState()\n\n  const onSubmit=async ()=>{\n    try {\n\n      if(form.name!==\"\" && form.lat!==\"\" && form.lng!==\"\" && file && form.radius >= 1){\n        const fd = new FormData()\n        fd.append(\"name\",form.name)\n        fd.append(\"latitude\",form.lat)\n        fd.append(\"longitude\",form.lng)\n        fd.append(\"sound\",file)\n        fd.append(\"radius\", form.radius)\n\n        let res = await axios.post(`${process.env.REACT_APP_API_URI}/speaker/register`,fd,{\n          headers:{\n            'Content-Type': 'multipart/form-data',\n            'Authorization':`Bearer ${token}`\n          }\n        })\n        if(res.status === 201){\n          props.history.replace(\"/dashboard\")\n        }\n      }else {\n        console.log(form)\n        throw \"Existen campos vacíos, por favor llena todo el formulario\"\n      }\n    }catch (e){\n      if(e){\n        throw e.message\n      }\n      throw \"Error interno, por favor intente más tarde.\"\n    }\n\n  };\n\n  const onEdit=async ()=>{\n    try {\n      const fd = new FormData()\n      form.name && fd.append(\"name\",form.name);\n      form.lat  && fd.append(\"latitude\",form.lat);\n      form.lng  && fd.append(\"longitude\",form.lng);\n      file      && fd.append(\"sound\",file);\n      (form.radius >= 1) && fd.append(\"radius\", form.radius);\n\n      let res = await axios.put(`${process.env.REACT_APP_API_URI}/speaker/update/${place._id}`,fd,{\n        headers:{\n          'Content-Type': 'multipart/form-data',\n          'Authorization':`Bearer ${token}`\n        }\n      })\n      if(res.status !== 200){\n        throw \"Hubo un error al actualizar\"\n      } else {\n        props.onClose()\n      }\n    }catch (e){\n      if(e){\n        throw e.message\n      }\n      throw \"Error interno, por favor intente más tarde.\"\n    }\n\n  }\n\n  const triggerSubmit=()=>{\n    toast.promise(\n      props.edit ? onEdit() : onSubmit(),\n      {\n        loading:\"Guardando...\",\n        success:\"Guardado exitosamente\",\n        error:(e)=>e\n      }\n    )\n  }\n\n  const handleLatLngSet=(lat,lng)=>{\n    setForm({\n      ...form,\n      lat,\n      lng\n    })\n  }\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        {props.edit || <CCardHeader> Agregar lugar </CCardHeader>}\n        <CCardBody>\n          <CForm>\n            <div className=\"row\">\n              <div className={\"col-md-12 mb-3\"}>\n                <CFormLabel htmlFor=\"place-name\">Nombre: </CFormLabel>\n                <CFormControl\n                  value={form.name}\n                  onChange={event => setForm({...form,name:event.target.value})}\n                  type={\"text\"}\n                  id=\"place-name\"\n                  placeholder={\"Ingresar nombre del lugar\"}\n                />\n              </div>\n              <div className=\"col-md-12 mt-3\">\n                <div>Selecciona el sonido a reproducir:</div>\n                <div className={\"mt-3\"}>\n                  <DropZone setFile={setFile} />\n                </div>\n              </div>\n              <div className=\"col-md-12 mt-3\">\n                Selecciona la ubicación:\n              </div>\n              <div className=\"col-md-8 mt-3\">\n                <CContainer>\n                  <CMap onSelect={handleLatLngSet}/>\n                </CContainer>\n              </div>\n              <div className=\"col-md-4\">\n                <div className=\"col-md-12 mt-3\">\n                  <div className={\"mb-3\"}>\n                    <CFormLabel htmlFor=\"place-lat\">Latitud: </CFormLabel>\n                    <CFormControl\n                      value={form.lat}\n                      type={\"text\"}\n                      id=\"place-lat\"\n                      readOnly={true}\n                    />\n                  </div>\n                  <div className={\"mb-3\"}>\n                    <CFormLabel htmlFor=\"place-long\">Longitud: </CFormLabel>\n                    <CFormControl\n                      readOnly={true}\n                      value={form.lng}\n                      type={\"text\"}\n                      id=\"place-long\"\n                    />\n                  </div>\n                  <div className={\"mb-3\"}>\n                    <CFormLabel htmlFor=\"place-long\">Radio de acción (metros): </CFormLabel>\n                    <CFormControl\n                      value={form.radius}\n                      onChange={event => setForm({...form,radius: parseFloat(event.target.value) })}\n                      type={\"number\"}\n                      min={1}\n                      id=\"place-long\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n            </div>\n            <div className={\"d-flex justify-content-end\"}>\n              <CButton onClick={triggerSubmit}>\n                Guardar\n              </CButton>\n            </div>\n          </CForm>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Typography\n"],"sourceRoot":""}